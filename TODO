Create DB init where index creation etc takes place (for now we are not using indexes AT ALL!)

Spend a pomo looking into shorter and less ugly variations on raw uuids to clean up URLs etc.

Spend a pomo looking into TypeScript with React: a good idea?

Spend a pomo thinking about whether the URL structure for a checklist really needs its template ID as well. This is arguably right from a REST philosophy, but who cares? Why does a checklist need to know its template origins? Are we ever going to take knowledge from a template and apply it to an existing instance? That seems unlikely to me. OR MAYBE THIS IS RIGHT?? Maybe checklist instances should be just be templateId, then list of {_id: '<uuid>', value: 'xyz'} which are mapped onto templates. Upside is that the instance is smaller and so less network traffic, downside is it opens the question of whether updating templates changes instances (in progress and or historic).

Most recently used checklist instance on front page.

For responsiveness, decouple visual actions (checking a box) with writing to DB? Consider it...
  - CHECK: is this still happening? We aren't binding checkboxes with material design anymore

Questions on completion:
  - If you complete all checks in a checklist, should it be automatically marked as completed?
  - Should it also be automatically closed?
  - Alternatively, should you be able to complete a checklist without completing all checks?

"Repeatable” is a better name for checklists? Imagine also supporting a "daily mgmt” checklist that lets you increment a counter for every glass of water, generally record your day.

Sanremo each repeatable has a key that you can search by, e.g. date, or random string (e.g. treeish). This is a field known to the indexer, and appears in the title alongside the name of the repeatable

Other input types:
 - Text, URL, Date: all can be linked to `key` which can be searched on.
 - Counter with max. Starts at 0, hitting space stays on the same el until his max, then moves on.
 - Sub lists, when moving into one the outer area dims and once you complete everything inside it, the main checkbox completes (or increments, see above) and collapses, moving on
