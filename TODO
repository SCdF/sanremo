Get rid of our current routing library, it is deprecated

Spend a pomo looking into shorter and less ugly variations on raw uuids to clean up URLs etc.

Spend a pomo looking into TypeScript with React: a good idea?

Most recently used checklist instance on front page.

For responsiveness, decouple visual actions (checking a box) with writing to DB? Consider it...
  - CHECK: is this still happening? We aren't binding checkboxes with material design anymore

Questions on completion:
  - If you complete all checks in a checklist, should it be automatically marked as completed?
  - Should it also be automatically closed?
  - Alternatively, should you be able to complete a checklist without completing all checks?

"Repeatable” is a better name for checklists? Imagine also supporting a "daily mgmt” checklist that lets you increment a counter for every glass of water, generally record your day.
Or "Steps". Maybe that is best name?

Each repeatable has a key that you can search by, e.g. date, or random string (e.g. treeish). This is a field known to the indexer, and appears in the title alongside the name of the repeatable
Each repeatable has a "notes" section that supports markdown at the end

Other input types:
 - Text, URL, Date: all can be linked to `key` which can be searched on (see above).
 - Counter with max. Starts at 0, hittecklistng space stays on the same el until his max, then moves on.
 - Sub lists, when moving into one the outer area dims and once you complete everything inside it, the main checkbox completes (or increments, see above) and collapses, moving on

Work out how to refactor code base to keep concerns together.
 - `deleted` means a soft delete. This truth is relied upon in template deletion, and template listing, but they don't learn this from a shared placeholde
 - `_id`s are defined and split in various ways, the knowledge of which is spread around
 - etc. Maybe have a 'datatype` directory or something?
